/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/rag/bedrock": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        /** Ask Bedrock a question and receive a response with sources */
        post: {
            parameters: {
                query?: never;
                header?: never;
                path?: never;
                cookie?: never;
            };
            requestBody: {
                content: {
                    "application/json": components["schemas"]["RAGRequest"];
                };
            };
            responses: {
                /** @description Successful response */
                200: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["RAGResponse"];
                    };
                };
                /** @description Bad request */
                400: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Unauthorized */
                401: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Forbidden */
                403: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
                /** @description Internal server error */
                500: {
                    headers: {
                        [name: string]: unknown;
                    };
                    content: {
                        "application/json": components["schemas"]["ErrorResponse"];
                    };
                };
            };
        };
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        RAGRequest: {
            /** @description Unique identifier of this message */
            message_id: string;
            /** @description The query for Bedrock to answer */
            content: string;
            /** @description Optional session identifier */
            session_id?: string;
            /** Format: date-time */
            created_at: string;
        };
        RAGResponse: {
            /** @description Unique identifier of this message */
            message_id: string;
            /** @description The generated LLM response based on the retrieved chunks */
            content: string;
            /** @description A list of response parts with their retrieved sources */
            response_parts: components["schemas"]["ResponsePart"][];
            /** @description The session identifier, either newly generated or returned from the request */
            session_id: string;
            /**
             * Format: date-time
             * @example 2024-08-23T13:28:00Z
             */
            created_at: string;
        };
        ErrorResponse: {
            /**
             * @description The HTTP status code of the response
             * @example 401
             */
            status: number;
            /**
             * @description The machine readable error identifier
             * @example INVALID_TOKEN
             */
            error: string;
            /**
             * @description The human readable error message
             * @example The provided token is invalid.
             */
            message: string;
        };
        ResponsePart: {
            /** @description The text content of the response part */
            text: string;
            /** @description The chunks retrieved from the vector store to generate the response part */
            references: components["schemas"]["Chunk"][];
        };
        Chunk: {
            /** @description The text content of the chunks */
            text: string;
            /** Format: uri */
            url: string;
        };
        Conversation: {
            session_id: string;
            user_id: string;
            /**
             * Format: date-time
             * @example 2024-08-23T13:28:00Z
             */
            created_at: string;
            /**
             * Format: date-time
             * @example 2024-08-23T13:28:00Z
             */
            last_updated: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export type operations = Record<string, never>;
