AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Multi-endpoint RAG API (Bedrock, LangChain) using AWS SAM

Globals:
  Function:
    Timeout: 30
    Runtime: python3.13

Resources:
  RagApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: 3600
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Multi-endpoint RAG API
          version: 1.0.0
        paths:
          /rag/bedrock:
            post:
              summary: Ask Bedrock a question and receive a response with sources
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/RAGRequest"

              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockRagFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

              x-amazon-apigateway-request-validators:
                validate-body:
                  validateRequestBody: true
                  validateRequestParameters: false

              x-amazon-apigateway-request-validator: validate-body

              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/RAGResponse"
                "400":
                  description: Bad request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "401":
                  description: Unauthorized
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "403":
                  description: Forbidden
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "500":
                  description: Internal server error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"

        components:
          schemas:
            RAGRequest:
              type: object
              properties:
                message_id:
                  description: Unique identifier of this message
                  type: string
                content:
                  description: The query for Bedrock to answer
                  type: string
                session_id:
                  description: Optional session identifier
                  type: string
                created_at:
                  type: string
                  format: date-time
              required: [message_id, content, created_at]

            RAGResponse:
              type: object
              properties:
                message_id:
                  description: Unique identifier of this message
                  type: string
                content:
                  type: string
                  description: The generated LLM response based on the retrieved chunks
                response_parts:
                  type: array
                  description: A list of response parts with their retrieved sources
                  items:
                    $ref: "#/components/schemas/ResponsePart"
                session_id:
                  description: The session identifier, either newly generated or returned from the request
                  type: string
                created_at:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
              required:
                [message_id, content, response_parts, session_id, created_at]

            ErrorResponse:
              type: object
              properties:
                status:
                  type: number
                  description: The HTTP status code of the response
                  example: 401
                error:
                  type: string
                  description: The machine readable error identifier
                  example: INVALID_TOKEN
                message:
                  type: string
                  description: The human readable error message
                  example: "The provided token is invalid."
              required: [status, error, message]

            ResponsePart:
              type: object
              properties:
                text:
                  type: string
                  description: The text content of the response part
                references:
                  type: array
                  description: The chunks retrieved from the vector store to generate the response part
                  items:
                    $ref: "#/components/schemas/Chunk"
              required: [text, references]

            Chunk:
              type: object
              properties:
                text:
                  type: string
                  description: The text content of the chunks
                url:
                  type: string
                  format: uri
              required: [text, url]

            Conversation:
              type: object
              properties:
                session_id:
                  type: string
                user_id:
                  type: string
                created_at:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
                last_updated:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
              required: [session_id, user_id, created_at, last_updated]

      Auth:
        DefaultAuthorizer: RagCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          RagCognitoAuthorizer:
            UserPoolArn: !GetAtt RagCognitoUserPool.Arn

  BedrockRagFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bedrock_impl/src
      Handler: bedrock_impl.handler.bedrock_handler
      Policies:
        - AWSLambdaBasicExecutionRole
        - DynamoDBCrudPolicy:
            TableName: !Ref BedrockSessionsTable
        - Statement:
            - Effect: Allow
              Action:
                - bedrock:*
              Resource: "*"

  # Ensures BedrockRagFunction can only be called by RagApi
  BedrockRagFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BedrockRagFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RagApi}/Prod/*/*

  RagCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: RagUserPool
      # Policies:
      #   PasswordPolicy:
      #     MinimumLength: 8
      #     RequireLowercase: true
      #     RequireNumbers: true
      #     RequireSymbols: true
      #     RequireUppercase: true
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  RagCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref RagCognitoUserPool
      ClientName: RagUserPoolClient
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  BedrockSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: BedrockSessions
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: created_at_message_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: created_at_message_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LangchainCheckpointsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LangchainCheckpoints
      AttributeDefinitions:
        - AttributeName: thread_id
          AttributeType: S
        - AttributeName: checkpoint_id
          AttributeType: S
      KeySchema:
        - AttributeName: thread_id
          KeyType: HASH
        - AttributeName: checkpoint_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LangchainWritesTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: LangchainWrites
      AttributeDefinitions:
        - AttributeName: thread_id_checkpoint_id_checkpoint_ns
          AttributeType: S
        - AttributeName: task_id_idx
          AttributeType: S
      KeySchema:
        - AttributeName: thread_id_checkpoint_id_checkpoint_ns
          KeyType: HASH
        - AttributeName: task_id_idx
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for Prod stage for RAG function
    Value: !Sub https://${RagApi}.execute-api.${AWS::Region}.amazonaws.com/Prod

  BedrockRagFunction:
    Description: Bedrock RAG Lambda ARN
    Value: !GetAtt BedrockRagFunction.Arn

  RagCognitoUserPool:
    Description: Pool of internal LMI users authorised to access the RAG-Demon application
    Value: !GetAtt RagCognitoUserPool.Arn

  RagCognitoUserPoolClientId:
    Description: Client to access and modify the RAG-Demon UserPool
    Value: !GetAtt RagCognitoUserPoolClient.ClientId
