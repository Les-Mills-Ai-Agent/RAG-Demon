AWSTemplateFormatVersion: "2010-09-09"
Transform: AWS::Serverless-2016-10-31
Description: |
  Multi-endpoint RAG API (Bedrock, LangChain) using AWS SAM

Globals:
  Function:
    Timeout: 30
    Runtime: python3.13

Parameters:
  Environment:
    Type: String
    Default: test
    Description: Deployment environment (prod or test)
  OssCollectionArn:
    Type: String
    Default: arn:aws:aoss:us-east-1:527748639759:collection/299gexfprk8589m5waqb
  OssCollectionName:
    Type: String
    Default: lmi-knowledge-base-collection
  KnowledgeBaseRoleArn:
    Type: String
    Default: arn:aws:iam::527748639759:role/BedrockKnowledgeBaseRole

Conditions:
  IsProd: !Equals [!Ref Environment, "prod"]
  IsTest: !Not [Condition: IsProd]

Resources:
  # RagFrontend:
  #   Type: AWS::Amplify::App
  #   Properties:
  #     Name: ragdemon-frontend
  #     Repository: https://github.com/Les-Mills-Ai-Agent/RAG-Demon
  #     AccessToken: "{{resolve:secretsmanager:github/amplify-access-token:SecretString:GithubAccessToken}}"
  #     EnvironmentVariables:
  #       - Value: https://ragdemon.auth.us-east-1.amazoncognito.com
  #         Name: VITE_COGNITO_AUTHORITY
  #       - Value: !GetAtt RagCognitoUserPoolClient.ClientId
  #         Name: VITE_COGNITO_CLIENT_ID
  #       - Value: !Sub https://${RagApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}
  #         Name: BEDROCK_API_URL
  #     Platform: WEB
  #     EnableBranchAutoDeletion: true

  # RagFrontendDevBranch:
  #   Type: AWS::Amplify::Branch
  #   Condition: IsTest
  #   Properties:
  #     AppId: !GetAtt RagFrontend.AppId
  #     Stage: DEVELOPMENT
  #     BranchName: dev
  #     EnableAutoBuild: true

  # RagFrontendMainBranch:
  #   Type: AWS::Amplify::Branch
  #   Condition: IsProd
  #   Properties:
  #     AppId: !GetAtt RagFrontend.AppId
  #     Stage: PRODUCTION
  #     BranchName: main
  #     EnableAutoBuild: true

  RagApi:
    Type: AWS::Serverless::Api
    Properties:
      Name: ragdemon-api
      StageName: !Ref Environment
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,Authorization,X-Amz-Date,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: 3600
      DefinitionBody:
        openapi: 3.0.1
        info:
          title: Multi-endpoint RAG API
          version: 1.0.0
        x-amazon-apigateway-request-validators:
          validate-body:
            validateRequestBody: true
            validateRequestParameters: false
          validate-params-only:
            validateRequestBody: false
            validateRequestParameters: true
        paths:
          /rag/bedrock:
            post:
              summary: Ask Bedrock a question and receive a response with sources
              requestBody:
                required: true
                content:
                  application/json:
                    schema:
                      $ref: "#/components/schemas/RAGRequest"

              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${BedrockRagFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

              x-amazon-apigateway-request-validator: validate-body

              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/RAGResponse"
                "400":
                  description: Bad request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "401":
                  description: Unauthorized
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "403":
                  description: Forbidden
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "500":
                  description: Internal server error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"

          /rag/bedrock/conversation/{user_id}:
            get:
              summary: Fetch all conversations that belong to a given user
              parameters:
                - in: path
                  name: user_id
                  required: true
                  schema:
                    type: string
                  description: The id of the user

              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConversationHandlingFunction.Arn}/invocations
                httpMethod: POST
                type: aws_proxy

              x-amazon-apigateway-request-validator: validate-params-only

              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/Conversation"
                "400":
                  description: Bad request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "401":
                  description: Unauthorized
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "403":
                  description: Forbidden
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "500":
                  description: Internal server error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"

          /rag/bedrock/messages/{session_id}:
            get:
              summary: Fetch all messages within a conversation/session
              parameters:
                - in: path
                  name: session_id
                  required: true
                  schema:
                    type: string
                  description: The id of the conversation/session

              x-amazon-apigateway-integration:
                uri: !Sub arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ConversationHandlingFunction.Arn}/invocations
                httpMethod: GET
                type: aws_proxy

              x-amazon-apigateway-request-validator: validate-params-only

              responses:
                "200":
                  description: Successful response
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: "#/components/schemas/RAGResponse"
                "400":
                  description: Bad request
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "403":
                  description: Forbidden
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"
                "500":
                  description: Internal server error
                  content:
                    application/json:
                      schema:
                        $ref: "#/components/schemas/ErrorResponse"

        components:
          schemas:
            Conversation:
              type: object
              properties:
                session_id:
                  type: string
                user_id:
                  type: string
                created_at:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
                last_updated:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
              required: [session_id, user_id, created_at, last_updated]

            RAGRequest:
              type: object
              properties:
                message_id:
                  description: Unique identifier of this message
                  type: string
                content:
                  description: The query for Bedrock to answer
                  type: string
                session_id:
                  description: Optional session identifier
                  type: string
                created_at:
                  type: string
                  format: date-time
              required: [message_id, content, created_at]

            RAGResponse:
              type: object
              properties:
                message_id:
                  description: Unique identifier of this message
                  type: string
                content:
                  type: string
                  description: The generated LLM response based on the retrieved chunks
                response_parts:
                  type: array
                  description: A list of response parts with their retrieved sources
                  items:
                    $ref: "#/components/schemas/ResponsePart"
                session_id:
                  description: The session identifier, either newly generated or returned from the request
                  type: string
                created_at:
                  type: string
                  format: date-time
                  example: "2024-08-23T13:28:00Z"
              required:
                [message_id, content, response_parts, session_id, created_at]

            ErrorResponse:
              type: object
              properties:
                status:
                  type: number
                  description: The HTTP status code of the response
                  example: 401
                error:
                  type: string
                  description: The machine readable error identifier
                  example: INVALID_TOKEN
                message:
                  type: string
                  description: The human readable error message
                  example: "The provided token is invalid."
              required: [status, error, message]

            ResponsePart:
              type: object
              properties:
                text:
                  type: string
                  description: The text content of the response part
                references:
                  type: array
                  description: The chunks retrieved from the vector store to generate the response part
                  items:
                    $ref: "#/components/schemas/Chunk"
              required: [text, references]

            Chunk:
              type: object
              properties:
                text:
                  type: string
                  description: The text content of the chunks
                url:
                  type: string
                  format: uri
              required: [text, url]

      Auth:
        DefaultAuthorizer: RagCognitoAuthorizer
        AddDefaultAuthorizerToCorsPreflight: false
        Authorizers:
          RagCognitoAuthorizer:
            UserPoolArn: !GetAtt RagCognitoUserPool.Arn

  BedrockRagFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub BedrockRagFunction-${Environment}
      CodeUri: bedrock_impl/src
      Handler: bedrock_impl.handler.bedrock_handler
      Environment:
        Variables:
          KnowledgeBaseId: !Ref LmiKnowledgeBase
      Role: !GetAtt BedrockRagFunctionRole.Arn

  ConversationHandlingFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: bedrock_impl/src
      Handler: bedrock_impl.handler.conversation_handler
      Role: !GetAtt BedrockRagFunctionRole.Arn

  BedrockRagFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub BedrockRagFunctionRole-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: BedrockRagFunctionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:PutItem
                  - dynamodb:GetItem
                  - dynamodb:UpdateItem
                  - dynamodb:DeleteItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt BedrockSessionsTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: "*"

  ConversationHandlingFunctionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ConversationHandlingFunctionRole-${Environment}
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
        - PolicyName: ConversationHandlingFunctionInlinePolicy
          PolicyDocument:
            Version: "2012-10-17"
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:Scan
                Resource: !GetAtt BedrockSessionsTable.Arn
              - Effect: Allow
                Action:
                  - bedrock:*
                Resource: "*"

  # Ensures BedrockRagFunction can only be called by RagApi
  BedrockRagFunctionInvokePermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !GetAtt BedrockRagFunction.Arn
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${RagApi}/${Environment}/*/*

  RagCognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub RagUserPool-${Environment}
      # Policies:
      #   PasswordPolicy:
      #     MinimumLength: 8
      #     RequireLowercase: true
      #     RequireNumbers: true
      #     RequireSymbols: true
      #     RequireUppercase: true
      UsernameAttributes:
        - email
      AdminCreateUserConfig:
        AllowAdminCreateUserOnly: true

  RagCognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      UserPoolId: !Ref RagCognitoUserPool
      ClientName: !Sub RagUserPoolClient-${Environment}
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_PASSWORD_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
        - ALLOW_CUSTOM_AUTH
        - ALLOW_USER_SRP_AUTH
      PreventUserExistenceErrors: ENABLED

  RagCognitoUserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub ragdemon-${Environment}
      UserPoolId: !GetAtt RagCognitoUserPool.UserPoolId
      ManagedLoginVersion: 2

  BedrockSessionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub BedrockSessions-${Environment}
      AttributeDefinitions:
        - AttributeName: session_id
          AttributeType: S
        - AttributeName: created_at_message_id
          AttributeType: S
      KeySchema:
        - AttributeName: session_id
          KeyType: HASH
        - AttributeName: created_at_message_id
          KeyType: RANGE
      BillingMode: PAY_PER_REQUEST
      SSESpecification:
        SSEEnabled: true

  LmiKnowledgeBase:
    Type: AWS::Bedrock::KnowledgeBase
    Properties:
      Name: !Sub LmiKnowledgeBase-${Environment}
      RoleArn: !Ref KnowledgeBaseRoleArn
      KnowledgeBaseConfiguration:
        Type: VECTOR
        VectorKnowledgeBaseConfiguration:
          EmbeddingModelArn: arn:aws:bedrock:us-east-1::foundation-model/amazon.titan-embed-text-v2:0
      StorageConfiguration:
        Type: OPENSEARCH_SERVERLESS
        OpensearchServerlessConfiguration:
          CollectionArn: !Ref OssCollectionArn
          VectorIndexName: lmi-vector-index
          FieldMapping:
            VectorField: embedding
            TextField: text
            MetadataField: metadata

  LmiOnDemandDataSource:
    Type: AWS::Bedrock::DataSource
    Condition: IsProd
    Properties:
      DataSourceConfiguration:
        Type: WEB
        WebConfiguration:
          SourceConfiguration:
            UrlConfiguration:
              SeedUrls:
                - Url: "https://support.lesmillsondemand.com/support/solutions"
          CrawlerConfiguration:
            Scope: SUBDOMAINS
      KnowledgeBaseId: !Ref LmiKnowledgeBase
      Name: LmiOnDemandDataSource
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: SEMANTIC
          SemanticChunkingConfiguration:
            BreakpointPercentileThreshold: 95
            BufferSize: 0
            MaxTokens: 150

  LmiApiDocsDataSource:
    Type: AWS::Bedrock::DataSource
    Properties:
      DataSourceConfiguration:
        Type: WEB
        WebConfiguration:
          SourceConfiguration:
            UrlConfiguration:
              SeedUrls:
                - Url: "https://api.content.lesmills.com/docs/v1/content-portal-api.yaml"
          CrawlerConfiguration:
            Scope: SUBDOMAINS
      KnowledgeBaseId: !Ref LmiKnowledgeBase
      Name: LmiApiDocsDataSource
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: SEMANTIC
          SemanticChunkingConfiguration:
            BreakpointPercentileThreshold: 95
            BufferSize: 0
            MaxTokens: 150

  LmiFreshdeskDataSource:
    Type: AWS::Bedrock::DataSource
    Condition: IsProd
    Properties:
      DataSourceConfiguration:
        Type: WEB
        WebConfiguration:
          SourceConfiguration:
            UrlConfiguration:
              SeedUrls:
                - Url: "https://lesmillsvirtualapp.freshdesk.com/en/support/solutions"
          CrawlerConfiguration:
            Scope: SUBDOMAINS
      KnowledgeBaseId: !Ref LmiKnowledgeBase
      Name: LmiFreshdeskDataSource
      VectorIngestionConfiguration:
        ChunkingConfiguration:
          ChunkingStrategy: SEMANTIC
          SemanticChunkingConfiguration:
            BreakpointPercentileThreshold: 95
            BufferSize: 0
            MaxTokens: 150

Outputs:
  ApiUrl:
    Description: API Gateway endpoint URL for prod / test stage of RAG function
    Value: !Sub https://${RagApi}.execute-api.${AWS::Region}.amazonaws.com/${Environment}

  CognitoClientId:
    Description: Cognito user pool client ID
    Value: !GetAtt RagCognitoUserPoolClient.ClientId

  CognitoAuthority:
    Description: Cognito user pool domain URL
    Value: !Sub https://${RagCognitoUserPoolDomain}.${AWS::Region}.amazoncognito.com
