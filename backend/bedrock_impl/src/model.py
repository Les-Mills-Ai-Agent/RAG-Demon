# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-08-04T05:31:28+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field


class QuestionRequest(BaseModel):
    query: str = Field(..., description='The query for Bedrock to answer')
    session_id: Optional[str] = Field(None, description='Optional session identifier')


class ApiGatewayResponse(BaseModel):
    statusCode: Optional[int] = None
    headers: Optional[Dict[str, Any]] = None
    body: Optional[str] = None
    isBase64Encoded: Optional[bool] = None


class Chunk(BaseModel):
    text: Optional[str] = Field(None, description='The text content of the chunks')
    url: AnyUrl = Field(
        ..., description='The URL that the chunk was originally pulled from'
    )


class ErrorResponseBody(BaseModel):
    message: str


class ResponsePart(BaseModel):
    text: Optional[str] = Field(
        None, description='The text content of the response part'
    )
    references: List[Chunk] = Field(
        ...,
        description='The chunks retrieved from the vector store to generate the response part',
    )


class AnswerResponseBody(BaseModel):
    answer: str = Field(
        ..., description='The generated LLM response based on the retrieved chunks'
    )
    responseParts: List[ResponsePart] = Field(
        ..., description='A list of response parts with their retrieved sources'
    )
    session_id: str = Field(
        ...,
        description='The session identifier, either newly generated or taken from the request',
    )