# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-10-09T03:50:55+00:00

from __future__ import annotations

from datetime import datetime
from enum import Enum
from typing import List, Optional

from pydantic import AnyUrl, BaseModel, Field


class RAGRequest(BaseModel):
    message_id: str = Field(..., description='Unique identifier of this message')
    content: str = Field(..., description='The query for Bedrock to answer')
    session_id: Optional[str] = Field(None, description='Optional session identifier')
    created_at: datetime


class ErrorResponse(BaseModel):
    status: float = Field(
        ..., description='The HTTP status code of the response', example=401
    )
    error: str = Field(
        ...,
        description='The machine readable error identifier',
        example='INVALID_TOKEN',
    )
    message: str = Field(
        ...,
        description='The human readable error message',
        example='The provided token is invalid.',
    )


class Chunk(BaseModel):
    text: str = Field(..., description='The text content of the chunks')
    url: AnyUrl


class Conversation(BaseModel):
    session_id: str
    user_id: str
    created_at: datetime = Field(..., example='2024-08-23T13:28:00Z')
    last_updated: datetime = Field(..., example='2024-08-23T13:28:00Z')


class Severity(Enum):
    Low = 'Low'
    Medium = 'Medium'
    High = 'High'


class Metadata(BaseModel):
    userAgent: Optional[str] = None
    language: Optional[str] = None
    tzOffsetMin: Optional[float] = None


class Feedback(BaseModel):
    pk: str = Field(..., example='USER#${userId}')
    sk: str = Field(..., example='FEEDBACK#2025-10-05T12:00:00Z#uuid')
    sessionId: Optional[str] = None
    issueType: str
    severity: Severity
    notes: Optional[str] = None
    includeContext: Optional[bool] = None
    question: Optional[str] = None
    answer: Optional[str] = None
    submittedAt: datetime
    metadata: Optional[Metadata] = None


class ResponsePart(BaseModel):
    text: str = Field(..., description='The text content of the response part')
    references: List[Chunk] = Field(
        ...,
        description='The chunks retrieved from the vector store to generate the response part',
    )


class RAGResponse(BaseModel):
    message_id: str = Field(..., description='Unique identifier of this message')
    content: str = Field(
        ..., description='The generated LLM response based on the retrieved chunks'
    )
    response_parts: List[ResponsePart] = Field(
        ..., description='A list of response parts with their retrieved sources'
    )
    session_id: str = Field(
        ...,
        description='The session identifier, either newly generated or returned from the request',
    )
    created_at: datetime = Field(..., example='2024-08-23T13:28:00Z')
