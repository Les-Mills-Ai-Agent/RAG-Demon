name: RAGDemon PR deployment workflow

on:
  pull_request:
    branches: ["workflow-test"]

env:
  ENVIRONMENT: "pr-${{ github.event.pull_request.number }}"

permissions:
  id-token: write
  contents: read

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v6.0.0
        with:
          python-version: 3.13

      - name: Setup Poetry
        uses: Gr1N/setup-poetry@v9

      - name: Install dependencies
        run: |
          cd backend/bedrock_impl
          poetry install
          poetry self add poetry-plugin-export
          poetry run export-requirements
          cd ../..

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          role-to-assume: arn:aws:iam::527748639759:role/GithubActionsRole
          role-session-name: ${{ env.ENVIRONMENT }}-deploy
          aws-region: us-east-1

      - name: Clean up previous failed stack
        run: |
          aws cloudformation describe-stacks --stack-name ragdemon-${{ env.ENVIRONMENT }} --region us-east-1 \
            && aws cloudformation delete-stack --stack-name ragdemon-${{ env.ENVIRONMENT }} --region us-east-1 \
            && aws cloudformation wait stack-delete-complete --stack-name ragdemon-${{ env.ENVIRONMENT }} --region us-east-1 \
            || echo "No existing stack to delete"

      - name: Deploy with SAM
        run: |
          cd backend
          sam build
          sam deploy \
            --stack-name ragdemon-${{ env.ENVIRONMENT }} \
            --template-file template.yaml \
            --parameter-overrides Environment=${{ env.ENVIRONMENT }} \
            --capabilities CAPABILITY_IAM CAPABILITY_AUTO_EXPAND \
            --region us-east-1 \
            --no-fail-on-empty-changeset \
            --no-confirm-changeset
          cd ..
      - name: Get Cloudformation stack outputs
        run: |
          outputs=$(aws cloudformation describe-stacks --stack-name ragdemon-${{ env.ENVIRONMENT }} --query "Stacks[0].Outputs" --output json)
          echo "API_URL=$(echo $outputs | jq -r '.[] | select(.OutputKey=="ApiUrl") | .OutputValue')" >> $GITHUB_ENV
          echo "COGNITO_CLIENT_ID=$(echo $outputs | jq -r '.[] | select(.OutputKey=="CognitoClientId") | .OutputValue')" >> $GITHUB_ENV
          echo "COGNITO_AUTHORITY=$(echo $outputs | jq -r '.[] | select(.OutputKey=="CognitoAuthority") | .OutputValue')" >> $GITHUB_ENV
      - name: Create .env for frontend
        run: |
          echo "API_URL=\"${{ env.API_URL }}\"" > frontend/.env
          echo "VITE_COGNITO_CLIENT_ID=\"${{ env.COGNITO_CLIENT_ID }}\"" >> frontend/.env
          echo "VITE_COGNITO_AUTHORITY=\"${{ env.COGNITO_AUTHORITY }}\"" >> frontend/.env
