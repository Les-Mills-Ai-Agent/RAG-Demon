# generated by datamodel-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-08-04T05:31:28+00:00

from __future__ import annotations

from typing import Any, Dict, List, Optional

from pydantic import AnyUrl, BaseModel, Field

from mypy_boto3_bedrock_agent_runtime.type_defs import RetrieveAndGenerateResponseTypeDef


class QuestionRequest(BaseModel):
    query: str = Field(..., description='The query for Bedrock to answer')
    session_id: Optional[str] = Field(None, description='Optional session identifier')


class ApiGatewayResponse(BaseModel):
    statusCode: Optional[int] = None
    headers: Optional[Dict[str, Any]] = None
    body: Optional[str] = None
    isBase64Encoded: Optional[bool] = None


class Chunk(BaseModel):
    text: Optional[str] = Field(None, description='The text content of the chunks')
    url: AnyUrl = Field(
        ..., description='The URL that the chunk was originally pulled from'
    )


class ErrorResponseBody(BaseModel):
    message: str


class ResponsePart(BaseModel):
    text: Optional[str] = Field(
        None, description='The text content of the response part'
    )
    references: List[Chunk] = Field(
        ...,
        description='The chunks retrieved from the vector store to generate the response part',
    )


class AnswerResponseBody(BaseModel):
    answer: str = Field(
        ..., description='The generated LLM response based on the retrieved chunks'
    )
    responseParts: List[ResponsePart] = Field(
        ..., description='A list of response parts with their retrieved sources'
    )
    session_id: str = Field(
        ...,
        description='The session identifier, either newly generated or taken from the request',
    )

    @staticmethod
    def from_retrieve_and_generate_response(data: RetrieveAndGenerateResponseTypeDef) -> AnswerResponseBody:
        output = data["output"]["text"]
        session_id = data["sessionId"]
        citations = data["citations"]

        extracted_parts = []

        for citation in citations:
            generated_response_part = citation.get("generatedResponsePart")
            part = None
            if generated_response_part:
                text_response_part = generated_response_part.get("textResponsePart")
                if text_response_part:
                    part = text_response_part.get("text")
            refs = citation.get("retrievedReferences", [])
            simplified_refs = [
                {
                    "text": ref.get("content", {}).get("text"),
                    "url": ref.get("location", {}).get("webLocation", {}).get("url")
                }
                for ref in refs if ref.get("location", {}).get("type") == "WEB"
            ]
            extracted_parts.append({
                "text": part,
                "references": simplified_refs
            })

        return AnswerResponseBody(
            answer = output,
            responseParts = extracted_parts,
            session_id = session_id
        )


